@page "/render/info/{key}"
@inject RenderService renderService

<h3>Render Info for @key</h3>

@if (renderInfo == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="render-info">
        <div class="render-info-header">
            <p><strong>Name:</strong> @renderInfo.Name</p>
            <p><strong>Type:</strong> @renderInfo.Type</p>
            <p><strong>Status:</strong> @renderInfo.Status</p>
            <p><strong>Date Created:</strong> @renderInfo.DateCreate.ToString("yyyy-MM-dd HH:mm:ss")</p>
        </div>

        <div class="render-info-content">
            <div class="render-info-column">
                <h4>Render Configuration (JSON)</h4>
                <pre>@FormatJson(renderInfo.RenderConfigJSON)</pre>
            </div>

            <div class="render-info-column">
                <h4>Objects (JSON)</h4>
                <pre>@FormatJson(renderInfo.ObjectsJSON)</pre>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? key { get; set; }

    private RenderInfo? renderInfo;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(key))
        {
            try
            {
                renderInfo = await renderService.GetRenderCur(key);
            }
            catch (Exception ex)
            {
                // Обработка ошибки при получении данных
                Console.WriteLine($"Error fetching render info: {ex.Message}");
            }
        }
    }

    private string FormatJson(string json)
    {
        if (string.IsNullOrWhiteSpace(json))
        {
            return "No data available";
        }

        try
        {
            var jsonObject = Newtonsoft.Json.Linq.JToken.Parse(json);
            return jsonObject.ToString(Newtonsoft.Json.Formatting.Indented);
        }
        catch (Exception)
        {
            return "Invalid JSON format";
        }
    }
}

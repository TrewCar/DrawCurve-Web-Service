@page "/login"
@using DrawCurve.Client.Service
@using DrawCurve.Domen.Models
@using DrawCurve.Domen.Responces
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject IJSRuntime JsRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h3 class="card-title mb-0">Login</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="username" class="form-label">Username</label>
                            <InputText id="username" class="form-control" @bind-Value="loginModel.Login" placeholder="Enter your username" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Enter your password" type="password" />
                        </div>

                        <button type="submit" class="btn btn-primary w-100">Login</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private UserResource loginModel = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Если пользователь уже авторизован, перенаправляем его на другую страницу
        if (user.Identity?.IsAuthenticated ?? false)
        {
            Navigation.NavigateTo("/userinfo");
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            var response = await AuthService.LoginAsync(loginModel);
            Navigation.NavigateTo("/userinfo", true);
        }
        catch
        {
            await JsRuntime.InvokeVoidAsync("alert", "Incorrect login or password"); // Alert
            loginModel.Password = "";
        }
    }
}

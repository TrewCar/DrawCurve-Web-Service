@page "/render/gen/svglinecurve"
@using DrawCurve.Client.Pages.Generate.Objects
@using DrawCurve.Domen.Models.Core
@using DrawCurve.Domen.Models.Core.Enums
@using DrawCurve.Domen.Models.Core.Objects
@using static DrawCurve.Client.Service.RenderService
@inject NavigationManager Navigation
@inject RenderService renderService
@inject ConfigService configService
@inject MusicService MusicService
@attribute [Authorize]

<h3>Form Line Curve</h3>

<StyleForm />

<EditForm Model="renderInfo" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (wait)
    {
        <p><em>Loading default config...</em></p>
    }

    <div class="form-section">
        <h4>Render Info</h4>
        <div class="form-group">
            <label>Name:</label>
            <InputText class="form-control" @bind-Value="@renderInfo.Name" />
        </div>
    </div>

    <CnfRenderObject Config="@renderInfo.config" />

    <div class="form-section">
        <h4>Render Music</h4>
        <div class="card-grid">
            <div class="card">
                <div class="card-body">
                    <div class="form-group">
                        <label>Music file:</label>
                        <InputFile class="form-control" accept=".mp3,audio/*" OnChange="HandleFileSelected" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="form-section">
        <h4>Objects</h4>
        <div class="card-grid">
            <div class="card">
                <div class="card-header">
                    <h5>SVG</h5>
                </div>
                <div class="card-body">
                    <div class="form-group">
                        <label>Svg Body:</label>
                        <InputText class="form-control" @bind-Value="renderInfo.obejct.SvgValue" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="form-section">
        <h4>Action Config</h4>
        <div class="card-grid">
            @foreach (var obj in renderInfo.config.ActionsConfig)
            {
                <ActionCnfObject ActionConfig="@obj" />
            }
        </div>
    </div>

    <div class="form-section">
        <h4>Colors</h4>
        <div class="card-grid">
            @foreach (var obj in renderInfo.config.Colors)
            {
                <ColorObject Name="@obj.Key" Color="@obj.Value" />
            }
        </div>
    </div>



    <div class="form-actions">
        <button type="submit" class="btn btn-success">Submit</button>
    </div>
</EditForm>


@code {
    private IBrowserFile selectedFile;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        // You can also read the file or perform other actions here
    }
    private ResponceRenderInfoSvgCurve renderInfo = new ResponceRenderInfoSvgCurve
        {
            Name = "Example",
            config = new()
            {
                ActionsConfig = new(),
                Colors = new()
            },
            obejct = new SvgCurve(),
        };

    private bool wait = true;

    protected override async Task OnInitializedAsync()
    {
        renderInfo.config = await configService.GetDefaultData(RenderType.SvgRenderCurve);
        var obj = await configService.GetDefaultObjects(RenderType.SvgRenderCurve);

        foreach (var item in obj)
        {
            if (item is SvgCurve curve)
            {
                renderInfo.obejct = curve;
                break;
            }
        }
        wait = false;
    }

    private async Task HandleValidSubmit()
    {
        var url = "";
        try
        {
            url = await MusicService.Save(selectedFile);
            // Здесь можно обработать полученный URL, например, вывести его
            Console.WriteLine("File uploaded successfully. URL: " + url);
            renderInfo.config.PathMusic = url;
        }
        catch
        {
            return;
        }

        ResponceRenderInfo render = new()
            {
                Name = renderInfo.Name,
                config = renderInfo.config,
                obejcts = new List<ObjectRender> { renderInfo.obejct }, //renderInfo.obejcts.Select(x => (ObjectRender)x).ToList()
            };

        var key = await renderService.StartRender(RenderType.SvgRenderCurve, render);

        if (string.IsNullOrEmpty(key))
        {
            Console.WriteLine("ОШИБКА ПРИ НАЧАЛЕ РЕНЕДРА");
            return;
        }
        Navigation.NavigateTo($"/render/info/{key}");
    }


    public class ResponceRenderInfoSvgCurve
    {
        public string Name { get; set; }
        public SvgCurve obejct { get; set; }
        public RenderConfig config { get; set; }
    }
}

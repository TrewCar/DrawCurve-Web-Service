@page "/render/gen/linecurve"
@using DrawCurve.Client.Pages.Generate.Objects
@using DrawCurve.Domen.Models.Core
@using DrawCurve.Domen.Models.Core.Enums
@using DrawCurve.Domen.Models.Core.Objects
@using static DrawCurve.Client.Service.RenderService
@inject NavigationManager Navigation
@inject RenderService renderService
@attribute [Authorize]

<h3>FormLineCurve</h3>

<StyleForm/>

<EditForm Model="renderInfo" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (wait)
    {
        <p><em>Loading default config...</em></p>
    }

    <NameObject Name="@renderInfo.Name" />

    <CnfRenderObject Config="@renderInfo.config" />

    <div class="form-section">
        <h4>Action Config</h4>
        <div class="card-grid">
            @foreach (var obj in renderInfo.config.ActionsConfig)
            {
                <ActionCnfObject ActionConfig="@obj" />
            }
        </div>
    </div>

    <div class="form-section">
        <h4>Colors</h4>
        <div class="card-grid">
            @foreach (var obj in renderInfo.config.Colors)
            {
                <ColorObject Name="@obj.Key" Color="@obj.Value" />
            }
        </div>
    </div>

    <div class="form-section">
        <h4>Objects</h4>
        <div class="card-grid">
            @foreach (var obj in renderInfo.obejcts)
            {
                <LineCurveObject Line="@obj" RemoveObject="(obj) => RemoveObject(obj)" />
            }
        </div>
        <button type="button" class="btn btn-primary" @onclick="AddLineCurve">Add LineCurve</button>
    </div>

    <div class="form-actions">
        <button type="submit" class="btn btn-success">Submit</button>
    </div>
</EditForm>


@code {
    private ResponceRenderInfoCurve renderInfo = new ResponceRenderInfoCurve
        {
            Name = "Example",
            config = new()
            {
                ActionsConfig = new(),
                Colors = new()
            },
            obejcts = new List<LineCurve>(),
        };

    private bool wait = true;

    protected override async Task OnInitializedAsync()
    {
        renderInfo.config = await renderService.GetDefaultData(RenderType.RenderCurve);
        var obj = await renderService.GetDefaultObjects(RenderType.RenderCurve);

        foreach (var item in obj)
        {
            if (item is LineCurve curve)
            {
                renderInfo.obejcts.Add(curve);
            }
        }
        wait = false;
    }

    private async Task HandleValidSubmit()
    {
        ResponceRenderInfo render = new()
            {
                Name = renderInfo.Name,
                config = renderInfo.config,
                obejcts = renderInfo.obejcts.Select(x => (ObjectRender)x).ToList()
            };

        var key = await renderService.StartRender(RenderType.RenderCurve, render);

        if (string.IsNullOrEmpty(key))
        {
            Console.WriteLine("ОШИБКА ПРИ НАЧАЛЕ РЕНЕДРА");
            return;
        }
        Navigation.NavigateTo($"/render/info/{key}");
    }

    private void AddLineCurve()
    {
        renderInfo.obejcts.Add(new LineCurve(100, 45, 5));
    }

    private void RemoveObject(LineCurve obj)
    {
        renderInfo.obejcts.Remove(obj);
        StateHasChanged();
    }

    public class ResponceRenderInfoCurve
    {
        public string Name { get; set; }
        public List<LineCurve> obejcts { get; set; }
        public RenderConfig config { get; set; }
    }
}
